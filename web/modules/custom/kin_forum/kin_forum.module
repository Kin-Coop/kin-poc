<?php

use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\comment\CommentInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;

/**
 * Don't allow the creation of a group form if there is already one existing for that household
 *
 * Implements hook_node_presave().
 *
 * Prevent duplicate group_forum nodes for the same household.
 */

function kin_forum_node_presave(\Drupal\Core\Entity\EntityInterface $node) {
  // Only apply to group_forum nodes.
  if ($node->getType() === 'group_forum') {
    $field_group = $node->get('field_group')->target_id;

    if ($field_group) {
      // Check for existing group_forum with this household, excluding current (for updates).
      $existing = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->getQuery()
        ->condition('type', 'group_forum')
        ->condition('field_group', $field_group)
        //->condition('nid', $node->id(), '!=') // Exclude current node during update.
        ->accessCheck(FALSE)
        ->range(0, 1)
        ->execute();

      if (!empty($existing)) {
        // Prevent save by throwing an exception.
        throw new \Drupal\Core\Entity\EntityStorageException(t('A group forum already exists for this household.'));
      }
    }
  }
}

/**
 * Creates a group_forum node when a Household contact is created.
 *
 * @param string $op
 *   Operation, e.g. 'create', 'edit'.
 * @param string $objectName
 *   Entity name, e.g. 'Contact'.
 * @param int $objectId
 *   The CiviCRM entity ID.
 * @param object $objectRef
 *   Reference to the full CiviCRM object.
 */
function kin_forum_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  // Only act on newlyâ€‘created Household contacts.
  if ($objectName === 'Household' && $op === 'create') {
    $contact_id = (int)$objectId;
    $household_name = $objectRef->display_name ?? t('Unnamed household');

    // Avoid duplicates: only one forum node per household.
    $existing = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->getQuery()
      ->condition('type', 'group_forum')
      ->condition('field_group', $contact_id)
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();

    if (empty($existing)) {
      // Create the group_forum node.
      $node = Node::create([
        'type' => 'group_forum',
        'title' => "$household_name Group Forum",
        'field_group' => ['target_id' => $contact_id],
        'status' => 1,
      ]);
      $node->save();
    }
  }
}

// Attached javascript to check for new comments to display message to user to refresh
function kin_forum_notify_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Only attach to your specific comment view
  if ($view->id() === 'group_forum_comments' && $view->current_display === 'page_1') {

    $args = $view->args;
    if (!empty($args[0])) {
      $group_id = (int)$args[0];

      // Load the group_forum node(s) referencing this group.
      $nids = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->getQuery()
        ->accessCheck(TRUE)
        ->condition('type', 'group_forum')
        ->condition('field_group', $group_id)
        ->range(0, 1) // get only the first match
        ->execute();
    }

    $node_id = Node::load(reset($nids));

    //$node_id = \Drupal::routeMatch()->getParameter('node');
    if ($node_id && is_object($node_id)) {
      $node_id = $node_id->id();
    }

    if ($node_id) {
      $variables['#attached']['library'][] = 'kin_forum/comment-notify';
      $variables['#attached']['drupalSettings']['commentNotify'] = [
        'nodeId' => $node_id,
        'interval' => 30000, // Check every 30 seconds
      ];
    }
  }
}


// Rename the forum title
/**
 * Implements hook_views_pre_render().
 */
function kin_forum_views_pre_render(ViewExecutable $view) {
  if ($view->id() === 'group_forum_comments' && $view->current_display === 'page_1') {
    // Get the entity reference ID from the URL (e.g. 217 from /member/group/217/forum).
    $args = $view->args;
    if (!empty($args[0])) {
      $group_id = (int) $args[0];

      // Load the group_forum node(s) referencing this group.
      $nids = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->getQuery()
        ->accessCheck(TRUE)
        ->condition('type', 'group_forum')
        ->condition('field_group', $group_id)
        ->range(0, 1) // get only the first match
        ->execute();

      if (!empty($nids)) {
        $node = Node::load(reset($nids));
        if ($node) {
          $view->setTitle($node->getTitle());
        }
      }
      else {
        // Fallback title
        $view->setTitle('Forum Comments');
      }
    }
  }
}

/**
 * Redirect anyone looking at the node to the group forum view
 *
 * Implements hook_entity_view().
 */
function kin_forum_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  // Only act on nodes of type 'group_forum'.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'group_forum') {

    // Get the entity reference target ID (field_group).
    if ($entity->hasField('field_group') && !$entity->get('field_group')->isEmpty()) {
      $group_id = $entity->get('field_group')->target_id;

      // Build redirect URL.
      $url = Url::fromUserInput("/member/group/$group_id/forum")->toString();

      // Perform the redirect.
      $response = new RedirectResponse($url);
      $response->send();

      // Stop further rendering.
      // This prevents the node from continuing to render.
      exit;
    }
  }
}


/**
 * Redirect a view after adding comment
 *
 * Alter the standard comment edit form.
 */
function kin_forum_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler.
  $form['actions']['submit']['#submit'][] = 'kin_forum_comment_edit_redirect';
}

/**
 * Custom submit handler for comment edit redirect.
 */
function kin_forum_comment_edit_redirect(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $form_state->getFormObject()->getEntity();
  $parent = $comment->getCommentedEntity();

  // Ensure the parent is a node
  if ($parent instanceof NodeInterface) {
    // Attempt to get the group ID from the entity reference field
    if (!$parent->get('field_group')->isEmpty()) {
      $group_target = $parent->get('field_group')->first();
      $group_id = $group_target->getValue()['target_id'];

      // Redirect to the view path with the comment anchor
      $url = Url::fromUri('internal:/member/group/' . $group_id . '/forum', [
        'fragment' => 'comment-' . $comment->id(),
      ]);
      $form_state->setRedirectUrl($url);
    }
  }
}

/**
 * Redirect to view after inserting comment
 *
 * Implements hook_comment_insert().
 */
function kin_forum_comment_insert(\Drupal\comment\CommentInterface $comment) {
  $request = \Drupal::requestStack()->getCurrentRequest();

  if ($request->getMethod() === 'POST' && !$request->isXmlHttpRequest()) {
    // Get the referring URL (where the form was submitted from)
    $referer = $request->headers->get('referer');

    if ($referer) {
      $parsed_url = parse_url($referer);
      $path = $parsed_url['path'] ?? '';
      $path_parts = explode('/', trim($path, '/'));

      // Expecting path like /member/group/217/forum
      if (isset($path_parts[2]) && is_numeric($path_parts[2])) {
        $group_id = $path_parts[2];
        $comment_id = $comment->id();

        // Build internal URL with anchor to comment
        $url = Url::fromUri("internal:/member/group/{$group_id}/forum", [
          'fragment' => "comment-{$comment_id}",
        ])->toString();

        $response = new RedirectResponse($url);
        $response->send();
        exit();
      }
    }
  }
}


/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function xxxkin_forum_entity_bundle_field_info_alter(array &$fields, $entity_type, $bundle) {
  if ($entity_type === 'node' && $bundle === 'group_forum' && isset($fields['field_group'])) {
    $fields['field_group']->addConstraint('UniqueGroupForum');
  }
}

function xxxkin_forum_entity_type_build(array &$entity_types) {
  // Attach the constraint via a service or handler as fallback.
}

function xxxkin_forum_entity_type_alter(array &$entity_types) {
  // Attach the constraint via a service or handler as fallback.
  //print_r($entity_types);
}


function xxxkin_forum_entity_field_storage_info_alter(array &$fields, $entity_type) {
  if ($entity_type->id() === 'node' && isset($fields['field_group'])) {
    $fields['field_group']->addConstraint('UniqueGroupForum');
  }
}

