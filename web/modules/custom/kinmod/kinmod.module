<?php

use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\civicrm_entity\Entity\CivicrmEntity;
use Drupal\Core\Render\AttachmentsInterface;

/**
 * Implements hook_page_attachments().
 */

function kinmod_form_private_message_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //dpm($form);
  //\Kint\Kint::dump($form);

  // Restrict the 'message' field to use only the 'plain_text' format.
  if (isset($form['message']['widget'][0])) {
    $form['message']['widget'][0]['#format'] = 'plain_text';
    $form['message']['widget'][0]['#allowed_formats'] = ['plain_text'];
  }
  if (isset($form['members'])) {
    // Make it disabled/read-only
    $form['members']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_views_post_render().
 */
function kin_views_post_render(ViewExecutable $view) {
    if($view->id() == 'kin_group_list'  && $view->current_display == 'page_2'){
        //dpm($view->result[0]->civicrm_contact_display_name);
        //dpm($view->result[0]);
        $title = $view->result[0]->civicrm_contact_display_name;

        // Set the view title.
        $view->setTitle($title);
        // Set the route title.
        //$route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
        //$route->setDefault('_title', $title);

        $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
        $route->setDefault('_title_callback', function() use ($title) {
            return $title;
        });
    } elseif ($view->id() == 'forum'  && $view->current_display == 'page_2') {
        //dpm($view->result[0]->_relationship_entities['field_group']->entityTypeId[0]);
        $title = $view->result[0]->civicrm_group . " Group Forum";
        // Set the view title.
        $view->setTitle($title);
        // Set the route title.
        $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
        $route->setDefault('_title_callback', function() use ($title) {
            return $title;
        });
    }
}

function kin_views_pre_render(&$view){

    if($view->id() == 'contributions'){
        if(empty($view->result) && isset($view->exposed_widgets)){
            $view->exposed_widgets = FALSE;
        }
    }
}


/**
 * Implements hook_form_alter().
 */
function kinmod_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check the view and display ID.
  /** @var \Drupal\views\ViewExecutable $view */

  // Get the View from the form state storage.
  $view = $form_state->getStorage()['view'] ?? NULL;

  if ($view && $view->id() === 'kin_group_list' && $view->current_display === 'block_1') {

    // The exposed text filter machine name will look like 'field_my_field_value'.
    if (isset($form['group_name'])) {
      // Add HTML5 minlength attribute.
      $form['group_name']['#attributes']['minlength'] = 2;

      // Add custom validation.
      $form['#validate'][] = 'kinmod_views_exposed_minlength_validate';
    }
  }
}

/**
 * Custom validation callback.
 */
function kinmod_views_exposed_minlength_validate(&$form, FormStateInterface $form_state) {
  $trigger = $form_state->getTriggeringElement();
  if (!isset($trigger['#value']) || strtolower($trigger['#id']) == 'edit-submit-kin-group-list') {
    return;
  }

  $value = $form_state->getValue('group_name');
  if (empty($value) || strlen($value) < 2) {
    $form_state->setErrorByName('group_name', t('Please enter at least 2 characters.'));
  }
}

/**
 * Implements hook_page_attachments().
 */
function kinmod_page_attachments(array &$attachments) {
    $route_name = \Drupal::routeMatch()->getRouteName();

    // Skip admin pages (backend UI).
    if (\Drupal::service('router.admin_context')->isAdminRoute()) {
        return;
    }

    // Attach Trustpilot library on public pages only.
    $attachments['#attached']['library'][] = 'kinmod/trustpilot';
    $attachments['#attached']['library'][] = 'kinmod/woopra';
}


/**
 * @file
 * Custom validation for group agreement content type.
 *
 * Create this as: modules/custom/group_agreement_validation/group_agreement_validation.module
 */

function kinmod_form_node_group_agreement_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['title'])) {
    // Hide the title field.
    $form['title']['#access'] = FALSE;
  }

  $form['body']['widget'][0]['#title_display'] = 'invisible';
  // Add custom validation for the node form
  $form['#validate'][] = 'kinmod_node_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kinmod_form_node_group_agreement_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['title'])) {
    // Hide the title field.
    $form['title']['#access'] = FALSE;
  }
  // Add custom validation for the node edit form
  $form['#validate'][] = 'kinmod_node_form_validate';
}

/**
 * Implements hook_form_alter().
 *
 * Replace your existing function with this improved version.
 */
function kinmod_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Only target the group agreement node form
  if ($form_id !== 'node_group_agreement_form') {
    return;
  }

  $request = \Drupal::request();
  $gid = $request->query->get('gid');

  if (empty($gid)) {
    // Show user-friendly error message
    \Drupal::messenger()->addError(t('A group ID is required to create a group agreement. Please access this form through the proper link.'));

    // Disable the form
    $form['#disabled'] = TRUE;

    // Create homepage URL properly
    $homepage_url = \Drupal\Core\Url::fromRoute('<front>');

    /*
    // Add explanatory text using render array instead of raw HTML
    $form['gid_error'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['messages', 'messages--error']],
      '#weight' => -100,
      'heading' => [
        '#markup' => '<h3>' . t('Missing Required Parameter') . '</h3>',
      ],
      'description' => [
        '#markup' => '<p>' . t('This form requires a group ID (gid) parameter to function properly. Please contact your administrator or access this form through the appropriate link.') . '</p>',
      ],
      'back_link' => [
        '#type' => 'link',
        '#title' => t('Return to homepage'),
        '#url' => $homepage_url,
        '#attributes' => ['class' => ['button']],
        '#prefix' => '<p>',
        '#suffix' => '</p>',
      ],
    ];
    */

    // Hide submit buttons
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#access'] = FALSE;
    }
    if (isset($form['actions']['preview'])) {
      $form['actions']['preview']['#access'] = FALSE;
    }

    return;
  }

  // Validate that gid is numeric
  if (!is_numeric($gid)) {
    \Drupal::messenger()->addError(t('The group ID must be a valid number.'));
    $form['#disabled'] = TRUE;
    return;
  }

  // Optional: Validate that the group exists in CiviCRM
  if (!kinmod_validate_group_exists($gid)) {
    \Drupal::messenger()->addError(t('The specified group does not exist or is not accessible.'));
    $form['#disabled'] = TRUE;
    return;
  }

  // Optional: Pre-populate the group field if it exists
  if (isset($form['field_civi_group'])) {
    $form['field_civi_group']['widget']['#default_value'] = $gid;
    // Make it read-only so user can't change it
    $form['field_civi_group']['#disabled'] = TRUE;

    // Add a helpful message
    \Drupal::messenger()->addStatus(t('Creating group agreement for group ID: @gid', ['@gid' => $gid]));
  }
}

/**
 * Helper function to validate if a group exists in CiviCRM.
 *
 * @param int $gid
 *   The group ID to validate.
 *
 * @return bool
 *   TRUE if the group exists, FALSE otherwise.
 */
function kinmod_validate_group_exists($gid) {
  try {
    // Initialize CiviCRM
    \Drupal::service('civicrm')->initialize();

    // Check if group exists
    $result = civicrm_api3('contact', 'get', [
      'id' => $gid,
      'sequential' => 1,
      'contact_type' => "Household",
      'options' => ['limit' => 1],
    ]);

    return !empty($result['values']);

  } catch (\Exception $e) {
    // Log the error and return false
    \Drupal::logger('kinmod')->error('Error validating group existence: @error', [
      '@error' => $e->getMessage()
    ]);
    return FALSE;
  }
}

/**
 * Custom validation function for group agreement node forms.
 */
function kinmod_node_form_validate($form, FormStateInterface $form_state) {
  $household_field_name = 'field_civi_group';

  // Get the household reference value
  $household_values = $form_state->getValue($household_field_name);

  $request = \Drupal::requestStack()->getCurrentRequest();
  $gid = $request->query->get('gid');

  if ($gid) {

    // Get the current node ID if editing
    $current_node_id = NULL;
    $node = $form_state->getFormObject()->getEntity();
    if ($node instanceof NodeInterface && !$node->isNew()) {
      $current_node_id = $node->id();
    }

    // Check if a group agreement already exists for this household
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'group_agreement')
      ->condition($household_field_name, $gid);

    // Exclude the current node if editing
    if ($current_node_id) {
      $query->condition('nid', $current_node_id, '!=');
    }

    $existing_nodes = $query->execute();

    if (!empty($existing_nodes)) {
      $existing_node_id = reset($existing_nodes);
      $existing_node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->load($existing_node_id);

      $form_state->setErrorByName('', t(
        'A group agreement already exists for this household. Please <a href="@edit_url">edit the existing agreement</a> instead.',
        ['@edit_url' => $existing_node->toUrl('edit-form')->toString()]
      ));

    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Additional safety check before saving - only logs if validation was bypassed.
 */
function kinmod_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  // Only process node entities
  if (!$entity instanceof \Drupal\node\NodeInterface) {
    return;
  }

  if ($entity->bundle() !== 'group_agreement') {
    return;
  }

  $household_field_name = 'field_civi_group'; // Replace with your actual field name

  if ($entity->hasField($household_field_name) && !$entity->get($household_field_name)->isEmpty()) {
    $household_id = $entity->get($household_field_name)->target_id;

    // Check if a group agreement already exists for this household
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'group_agreement')
      ->condition($household_field_name, $household_id);

    // Exclude the current node if it has an ID (editing existing)
    if (!$entity->isNew()) {
      $query->condition('nid', $entity->id(), '!=');
    }

    $existing_nodes = $query->execute();

    if (!empty($existing_nodes)) {
      // Log this as it means form validation was bypassed somehow
      \Drupal::logger('kinmod')->warning(
        'Attempted to save duplicate group agreement for household @household_id. This should have been caught by form validation.',
        ['@household_id' => $household_id]
      );
    }
  }
}

function kinmod_node_presave(Node $node) {
  if ($node->bundle() === 'group_agreement') {
    if ($node->isNew() || $node->getTitle() === '') {
      // Get the referenced household ID.
      $household_id = $node->get('field_civi_group')->target_id;
      if ($household_id) {
        // Load the household contact from CiviCRM Entity.
        $civi_contact = \Drupal::entityTypeManager()
          ->getStorage('civicrm_contact')
          ->load($household_id);

        if ($civi_contact) {
          $display_name = $civi_contact->display_name->value ?? 'Unknown Household';
          $node->setTitle($display_name . ' Group Agreement');

        }
      }
    }
  }
}

/**
 * Implements hook_node_access().
 *
 * Add this to your kinmod.module file.
 */
function kinmod_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  // Only apply to group_agreement content type and view operation
  if ($node->bundle() !== 'group_agreement' || $op !== 'view') {
    return \Drupal\Core\Access\AccessResult::neutral();
  }

  // Use our custom access checker
  $access_checker = \Drupal::service('kinmod.group_agreement_view_access');
  $route_match = \Drupal::routeMatch();

  return $access_checker->access($account, $route_match);
}

/**
 * Alternative: Implements hook_route_alter() to apply access check at route level.
 *
 * Use this INSTEAD of hook_node_access if you prefer route-level access control.
 * This approach works better with caching and is more performant.
 */
function kinmod_route_alter_for_view_access(&$collection) {
  // Apply to the canonical node view route
  if ($route = $collection->get('entity.node.canonical')) {
    // Add our custom access requirement
    $requirements = $route->getRequirements();
    $requirements['_custom_access'] = 'kinmod.group_agreement_view_access::access';
    $route->setRequirements($requirements);
  }
}
