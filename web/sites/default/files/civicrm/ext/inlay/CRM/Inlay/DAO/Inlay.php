<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from inlay/xml/schema/CRM/Inlay/Inlay.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:9ef6fcba25a2aec55342f539c2354565)
 */
use CRM_Inlay_ExtensionUtil as E;

/**
 * Database access object for the Inlay entity.
 */
class CRM_Inlay_DAO_Inlay extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_inlay';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique Inlay ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Public Inlay ID used in script tags.
   *
   * @var string
   *   (SQL type: char(12))
   *   Note that values will be retrieved from the database as a string.
   */
  public $public_id;

  /**
   * Administrative name
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $name;

  /**
   * Class name that implements this Inlay Type
   *
   * @var string
   *   (SQL type: varchar(140))
   *   Note that values will be retrieved from the database as a string.
   */
  public $class;

  /**
   * JSON blob of config.
   *
   * @var string
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $config;

  /**
   * on, off or broken
   *
   * @var string
   *   (SQL type: varchar(20))
   *   Note that values will be retrieved from the database as a string.
   */
  public $status;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_inlay';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Inlays') : E::ts('Inlay');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique Inlay ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay.id',
          'table_name' => 'civicrm_inlay',
          'entity' => 'Inlay',
          'bao' => 'CRM_Inlay_DAO_Inlay',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'public_id' => [
          'name' => 'public_id',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Public ID'),
          'description' => E::ts('Public Inlay ID used in script tags.'),
          'required' => TRUE,
          'maxlength' => 12,
          'size' => CRM_Utils_Type::TWELVE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay.public_id',
          'table_name' => 'civicrm_inlay',
          'entity' => 'Inlay',
          'bao' => 'CRM_Inlay_DAO_Inlay',
          'localizable' => 0,
          'add' => NULL,
        ],
        'name' => [
          'name' => 'name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Name'),
          'description' => E::ts('Administrative name'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay.name',
          'table_name' => 'civicrm_inlay',
          'entity' => 'Inlay',
          'bao' => 'CRM_Inlay_DAO_Inlay',
          'localizable' => 0,
          'add' => NULL,
        ],
        'class' => [
          'name' => 'class',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Class'),
          'description' => E::ts('Class name that implements this Inlay Type'),
          'required' => TRUE,
          'maxlength' => 140,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay.class',
          'table_name' => 'civicrm_inlay',
          'entity' => 'Inlay',
          'bao' => 'CRM_Inlay_DAO_Inlay',
          'localizable' => 0,
          'add' => NULL,
        ],
        'config' => [
          'name' => 'config',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Config'),
          'description' => E::ts('JSON blob of config.'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay.config',
          'table_name' => 'civicrm_inlay',
          'entity' => 'Inlay',
          'bao' => 'CRM_Inlay_DAO_Inlay',
          'localizable' => 0,
          'add' => NULL,
        ],
        'status' => [
          'name' => 'status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Status'),
          'description' => E::ts('on, off or broken'),
          'required' => TRUE,
          'maxlength' => 20,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay.status',
          'default' => 'on',
          'table_name' => 'civicrm_inlay',
          'entity' => 'Inlay',
          'bao' => 'CRM_Inlay_DAO_Inlay',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'inlay_status',
            'optionEditPath' => 'civicrm/admin/options/inlay_status',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'inlay', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'inlay', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'public_id' => [
        'name' => 'public_id',
        'field' => [
          0 => 'public_id',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_inlay::1::public_id',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
