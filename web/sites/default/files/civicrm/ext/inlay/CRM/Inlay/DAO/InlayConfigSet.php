<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from inlay/xml/schema/CRM/Inlay/InlayConfigSet.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:4ef7b0c9f90d65d1525e3edc9e3e7d22)
 */
use CRM_Inlay_ExtensionUtil as E;

/**
 * Database access object for the InlayConfigSet entity.
 */
class CRM_Inlay_DAO_InlayConfigSet extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_inlay_config_set';

  /**
   * Field to show when displaying a record.
   *
   * @var string
   */
  public static $_labelField = 'label';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique InlayConfigSet ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Machine name of schema that owns this, typically prefixed with the inlay extension shortname, e.g. inlaypay_stylesets
   *
   * @var string
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $schema_name;

  /**
   * Machine name of this config item, where needed, must be unique within schema.
   *
   * @var string
   *   (SQL type: varchar(128))
   *   Note that values will be retrieved from the database as a string.
   */
  public $set_name;

  /**
   * Human friendly admin name for the set
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $label;

  /**
   * JSON blob of config.
   *
   * @var string
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $config;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_inlay_config_set';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Inlay Config Sets') : E::ts('Inlay Config Set');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique InlayConfigSet ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay_config_set.id',
          'table_name' => 'civicrm_inlay_config_set',
          'entity' => 'InlayConfigSet',
          'bao' => 'CRM_Inlay_DAO_InlayConfigSet',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'schema_name' => [
          'name' => 'schema_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Schema Name'),
          'description' => E::ts('Machine name of schema that owns this, typically prefixed with the inlay extension shortname, e.g. inlaypay_stylesets'),
          'required' => TRUE,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay_config_set.schema_name',
          'table_name' => 'civicrm_inlay_config_set',
          'entity' => 'InlayConfigSet',
          'bao' => 'CRM_Inlay_DAO_InlayConfigSet',
          'localizable' => 0,
          'add' => NULL,
        ],
        'set_name' => [
          'name' => 'set_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Set Name'),
          'description' => E::ts('Machine name of this config item, where needed, must be unique within schema.'),
          'required' => TRUE,
          'maxlength' => 128,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay_config_set.set_name',
          'table_name' => 'civicrm_inlay_config_set',
          'entity' => 'InlayConfigSet',
          'bao' => 'CRM_Inlay_DAO_InlayConfigSet',
          'localizable' => 0,
          'add' => NULL,
        ],
        'label' => [
          'name' => 'label',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Label'),
          'description' => E::ts('Human friendly admin name for the set'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay_config_set.label',
          'table_name' => 'civicrm_inlay_config_set',
          'entity' => 'InlayConfigSet',
          'bao' => 'CRM_Inlay_DAO_InlayConfigSet',
          'localizable' => 0,
          'add' => NULL,
        ],
        'config' => [
          'name' => 'config',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Config'),
          'description' => E::ts('JSON blob of config.'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_inlay_config_set.config',
          'table_name' => 'civicrm_inlay_config_set',
          'entity' => 'InlayConfigSet',
          'bao' => 'CRM_Inlay_DAO_InlayConfigSet',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'inlay_config_set', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'inlay_config_set', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_schema_setname' => [
        'name' => 'index_schema_setname',
        'field' => [
          0 => 'schema_name',
          1 => 'set_name',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_inlay_config_set::1::schema_name::set_name',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
